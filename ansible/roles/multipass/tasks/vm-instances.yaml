# Input (machine-readable):
# multipass_vm_instances:
# - name: templ0-vm0
#   vcpu: 1
#   disk: 5Gi
#   mem: 2Gi
#   networks: []
#   cloud_init: ''
#   state: stopped # maybe for maintenance reasons
# - name: templ0-vm1
#   vcpu: 1
#   disk: 5Gi
#   mem: 2Gi
#   networks: []
#   cloud_init: ''
#   state: running
# - name: templ1-vm0
#   vcpu: 2
#   disk: 20Gi
#   mem: 3Gi
#   networks:
#   - name: "eth0"
#     mode: auto
#   cloud_init: microk8s.yml
#   state: running | stopped | deleted | suspended 


# API Notes
# state:
# See https://github.com/canonical/multipass/blob/80938d0f556060ecab0ec4020fa71efa62ceaf86/src/rpc/multipass.proto#L177
# - stopped: vm is effectively shutdown
# - suspended: vm is effectively slept
# LIMITATIONS: multipass purge not supported


# Windows
- block:
  - name: Get all created multipass instances
    win_command: multipass list --format json
    register: mp_list
    changed_when: false
    failed_when: mp_list.rc != 0
    check_mode: false
  - set_fact: mp_instances={{ mp_list.stdout | from_json }}
    check_mode: false

  - name: <echo> Create new multipass instances
    debug: 
      msg: >
        multipass launch 
        --cpus "{{ item.vcpu }}" 
        --disk "{{ item.disk }}" 
        --mem "{{ item.mem }}" 
        --name "{{ item.name }}"
    check_mode: false
    loop: "{{ multipass_vm_instances }}"

  - name: Create new multipass instances
    win_command: >
      multipass launch 
      --cpus "{{ item.vcpu }}" 
      --disk "{{ item.disk }}" 
      --mem "{{ item.mem }}" 
      --name "{{ item.name }}"
    register: mp_launch
    # change_when: todo
    # failed_when: todo
    check_mode: true
    loop: "{{ multipass_vm_instances }}"
  when: ansible_os_family == 'Windows'

    
# # Linux
# - block:
#   - name: Unpack desried VM names
#     # Output: [{name: vm-temp0-0, template: temp0}, {}]
#     set_fact: desired_vms="{{ multipass_vms }}"
#   - name: Get all created multipass instances
#     command: multipass list --format json
#     register: mp_list
#     changed_when: false
#     failed_when: mp_list.rc != 0
#   - set_fact: mp_instances={{ mp_list.stdout | from_json }}
#   when: ansible_os_family != 'Windows'
#   become: true

- name: "Show desired vms to be maintained in running state"
  debug: {msg: "desired_vms {{ desired_vms }}"}

- name: "Show all vms exists in the node"
  debug: {msg: "all vms: {{ mp_instances }}"}
